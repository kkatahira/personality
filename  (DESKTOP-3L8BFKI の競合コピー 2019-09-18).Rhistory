tF <- rmvnorm(n = n.sample, mean = c(0,0), sigma = Sigma)
# 独自因子の生成
D <- rmvnorm(n = n.sample, mean = numeric(p), sigma = diag(p)*0.001 ) # 分散は1に
# 仮想回答データの生成
y <- tF %*% t(A) + D
# 真の因子の値を入れるデータフレーム
df_true_f <- data.frame(tF)
names(df_true_f) <- c("factor.1","factor.2")
# 観測される仮想回答データをデータフレームに格納
df_data <- data.frame(y)
res_fa <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "none",    # 回転はせず，初期解を使用
fm = "ml"           # 最尤法を指定
)
round(res_fa$r.scores,5)
# 因子スコアを出す
# res_faでも因子スコアはres_fa$scoresとして出力されるが，
# ここはHarmanの方法を指定して改めて推定する
fsc <- factor.scores(df_data,
f = res_fa,
method = "Harman")
df_sc <- data.frame(fsc$scores)
names(df_sc) <- c("factor.1","factor.2")
# 因子スコア間の相関を出す
round(res_fa$r.scores,5)
df_true_f <- df_true_f %>%
mutate(orth = sprintf("%d%d",factor.1>0, factor.2>0))
df_true_f$orth <- as.factor(df_true_f$orth)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア")
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
cor.plot(res_fa, numbers = T)
cor.plot(cor(df_data), numbers = T)
Aest <- res_fa$loadings
Dest <- diag(1 - res_fa$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
res_fa2 <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "varimax", # 回転法はvarimaxを指定
fm = "ml"           # 最尤法を指定
)
fsc2 <- factor.scores(df_data,
f = res_fa2,
method = "Harman")
df_sc2 <- data.frame(fsc2$scores)
names(df_sc2) <- c("factor.1","factor.2")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
cor.plot(res_fa2, numbers = T)
Aest <- res_fa2$loadings
Dest <- diag(1 - res_fa2$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア")
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア (回転前)")
plot(df_sc2$factor.1, df_sc2$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア (回転後)")
cat("推定された因子スコア (回転前) 間の相関: r = ",
round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
cat("推定された因子スコア (回転後) 間の相関: r = ",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, cache = TRUE)
library(psych)
library(GPArotation)
library(mvtnorm)
library(tidyverse)
# 乱数のシードを設定
set.seed(1)
# サンプル数
n.sample <- 1000
p <- 10  # 項目数
# 仮想回答データを入れる変数のメモリを確保
y <- matrix(nrow = n.sample, ncol = p)
# 真の因子スコアを入れる行列のメモリを確保
tf <- matrix(0, nrow = n.sample, ncol = 2)
# 真の因子スコアの分散・共分散行列
r <- 0.4 # 因子スコア間の相関係数
Sigma <-  matrix(c(1, r, r, 1), ncol = 2)
# 因子負荷
a1 <- c(1,1,1,1,1,0,0,0,0,0)  # factor 1 項目1-5に値を持つ
a2 <- c(0,0,0,0,0,1,1,1,1,1)  # factor 2 項目6-10に値を持つ
A <- cbind(a1,a2) # 行列にまとめる
# 真の因子スコアの生成
tF <- rmvnorm(n = n.sample, mean = c(0,0), sigma = Sigma)
# 独自因子の生成
UD <- rmvnorm(n = n.sample, mean = numeric(p), sigma = diag(p) ) # 分散は1に
# 仮想回答データの生成
y <- tF %*% t(A) + UD
# 真の因子の値を入れるデータフレーム
df_true_f <- data.frame(tF)
names(df_true_f) <- c("factor.1","factor.2")
# 観測される仮想回答データをデータフレームに格納
df_data <- data.frame(y)
res_fa <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "none",    # 回転はせず，初期解を使用
fm = "ml"           # 最尤法を指定
)
round(res_fa$r.scores,5)
# 因子スコアを出す
# res_faでも因子スコアはres_fa$scoresとして出力されるが，
# ここはHarmanの方法を指定して改めて推定する
fsc <- factor.scores(df_data,
f = res_fa,
method = "Harman")
df_sc <- data.frame(fsc$scores)
names(df_sc) <- c("factor.1","factor.2")
# 因子スコア間の相関を出す
round(res_fa$r.scores,5)
df_true_f <- df_true_f %>%
mutate(orth = sprintf("%d%d",factor.1>0, factor.2>0))
df_true_f$orth <- as.factor(df_true_f$orth)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア")
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
cor.plot(res_fa, numbers = T)
cor.plot(cor(df_data), numbers = T)
Aest <- res_fa$loadings
Dest <- diag(1 - res_fa$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
res_fa2 <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "varimax", # 回転法はvarimaxを指定
fm = "ml"           # 最尤法を指定
)
fsc2 <- factor.scores(df_data,
f = res_fa2,
method = "Harman")
df_sc2 <- data.frame(fsc2$scores)
names(df_sc2) <- c("factor.1","factor.2")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
cor.plot(res_fa2, numbers = T)
Aest <- res_fa2$loadings
Dest <- diag(1 - res_fa2$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア")
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア (回転前)")
plot(df_sc2$factor.1, df_sc2$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア (回転後)")
cat("推定された因子スコア (回転前) 間の相関: r = ",
round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
cat("推定された因子スコア (回転後) 間の相関: r = ",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, cache = TRUE)
library(psych)
library(GPArotation)
library(mvtnorm)
library(tidyverse)
# 乱数のシードを設定
set.seed(1)
# サンプル数
n.sample <- 1000
p <- 10  # 項目数
# 仮想回答データを入れる変数のメモリを確保
y <- matrix(nrow = n.sample, ncol = p)
# 真の因子スコアを入れる行列のメモリを確保
tf <- matrix(0, nrow = n.sample, ncol = 2)
# 真の因子スコアの分散・共分散行列
r <- 0.5 # 因子スコア間の相関係数
Sigma <-  matrix(c(1, r, r, 1), ncol = 2)
# 因子負荷
a1 <- c(2,2,2,2,2,0,0,0,0,0)  # factor 1 項目1-5に値を持つ
a2 <- c(0,0,0,0,0,1,1,1,1,1)  # factor 2 項目6-10に値を持つ
A <- cbind(a1,a2) # 行列にまとめる
# 真の因子スコアの生成
tF <- rmvnorm(n = n.sample, mean = c(0,0), sigma = Sigma)
# 独自因子の生成
UD <- rmvnorm(n = n.sample, mean = numeric(p), sigma = diag(p) ) # 分散は1に
# 仮想回答データの生成
y <- tF %*% t(A) + UD
# 真の因子の値を入れるデータフレーム
df_true_f <- data.frame(tF)
names(df_true_f) <- c("factor.1","factor.2")
# 観測される仮想回答データをデータフレームに格納
df_data <- data.frame(y)
res_fa <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "none",    # 回転はせず，初期解を使用
fm = "ml"           # 最尤法を指定
)
round(res_fa$r.scores,5)
# 因子スコアを出す
# res_faでも因子スコアはres_fa$scoresとして出力されるが，
# ここはHarmanの方法を指定して改めて推定する
fsc <- factor.scores(df_data,
f = res_fa,
method = "Harman")
df_sc <- data.frame(fsc$scores)
names(df_sc) <- c("factor.1","factor.2")
# 因子スコア間の相関を出す
round(res_fa$r.scores,5)
df_true_f <- df_true_f %>%
mutate(orth = sprintf("%d%d",factor.1>0, factor.2>0))
df_true_f$orth <- as.factor(df_true_f$orth)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア")
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
cor.plot(res_fa, numbers = T)
cor.plot(cor(df_data), numbers = T)
Aest <- res_fa$loadings
Dest <- diag(1 - res_fa$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
res_fa2 <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "varimax", # 回転法はvarimaxを指定
fm = "ml"           # 最尤法を指定
)
fsc2 <- factor.scores(df_data,
f = res_fa2,
method = "Harman")
df_sc2 <- data.frame(fsc2$scores)
names(df_sc2) <- c("factor.1","factor.2")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
cor.plot(res_fa2, numbers = T)
Aest <- res_fa2$loadings
Dest <- diag(1 - res_fa2$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア")
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア (回転前)")
plot(df_sc2$factor.1, df_sc2$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア (回転後)")
cat("推定された因子スコア (回転前) 間の相関: r = ",
round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
cat("推定された因子スコア (回転後) 間の相関: r = ",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア")
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = sprintf("推定された因子スコア (回転前)\n相関係数 r = %.4f",
round(cor(df_sc$factor.1, df_sc$factor.2),5))
)
plot(df_sc2$factor.1, df_sc2$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = sprintf("推定された因子スコア (回転後)\n相関係数 r = %.4f",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5))
)
#
# cat("推定された因子スコア (回転前) 間の相関: r = ",
#     round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
# cat("推定された因子スコア (回転後) 間の相関: r = ",
#     round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア\n相関係数 r = %.4f",
round(cor(df_true_f$factor.1, df_true_f$factor.2),5))
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = sprintf("真の因子スコア\n相関係数 r = %.4f",
round(cor(df_true_f$factor.1, df_true_f$factor.2),5))
)
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = sprintf("推定された因子スコア (回転前)\n相関係数 r = %.4f",
round(cor(df_sc$factor.1, df_sc$factor.2),5))
)
plot(df_sc2$factor.1, df_sc2$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = sprintf("推定された因子スコア (回転後)\n相関係数 r = %.4f",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5))
)
#
# cat("推定された因子スコア (回転前) 間の相関: r = ",
#     round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
# cat("推定された因子スコア (回転後) 間の相関: r = ",
#     round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, cache = TRUE)
library(psych)
library(GPArotation)
library(mvtnorm)
library(tidyverse)
# 乱数のシードを設定
set.seed(1)
# サンプル数
n.sample <- 1000
p <- 10  # 項目数
# 仮想回答データを入れる変数のメモリを確保
y <- matrix(nrow = n.sample, ncol = p)
# 真の因子スコアを入れる行列のメモリを確保
tf <- matrix(0, nrow = n.sample, ncol = 2)
# 真の因子スコアの分散・共分散行列
r <- 0.7 # 因子スコア間の相関係数
Sigma <-  matrix(c(1, r, r, 1), ncol = 2)
# 因子負荷
a1 <- c(2,2,2,2,2,0,0,0,0,0)  # factor 1 項目1-5に値を持つ
a2 <- c(0,0,0,0,0,1,1,1,1,1)  # factor 2 項目6-10に値を持つ
A <- cbind(a1,a2) # 行列にまとめる
# 真の因子スコアの生成
tF <- rmvnorm(n = n.sample, mean = c(0,0), sigma = Sigma)
# 独自因子の生成
UD <- rmvnorm(n = n.sample, mean = numeric(p), sigma = diag(p) ) # 分散は1に
# 仮想回答データの生成
y <- tF %*% t(A) + UD
# 真の因子の値を入れるデータフレーム
df_true_f <- data.frame(tF)
names(df_true_f) <- c("factor.1","factor.2")
# 観測される仮想回答データをデータフレームに格納
df_data <- data.frame(y)
res_fa <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "none",    # 回転はせず，初期解を使用
fm = "ml"           # 最尤法を指定
)
round(res_fa$r.scores,5)
# 因子スコアを出す
# res_faでも因子スコアはres_fa$scoresとして出力されるが，
# ここはHarmanの方法を指定して改めて推定する
fsc <- factor.scores(df_data,
f = res_fa,
method = "Harman")
df_sc <- data.frame(fsc$scores)
names(df_sc) <- c("factor.1","factor.2")
# 因子スコア間の相関を出す
round(res_fa$r.scores,5)
df_true_f <- df_true_f %>%
mutate(orth = sprintf("%d%d",factor.1>0, factor.2>0))
df_true_f$orth <- as.factor(df_true_f$orth)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = "真の因子スコア")
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = "推定された因子スコア")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
cor.plot(res_fa, numbers = T)
cor.plot(cor(df_data), numbers = T)
Aest <- res_fa$loadings
Dest <- diag(1 - res_fa$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
res_fa2 <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "varimax", # 回転法はvarimaxを指定
fm = "ml"           # 最尤法を指定
)
fsc2 <- factor.scores(df_data,
f = res_fa2,
method = "Harman")
df_sc2 <- data.frame(fsc2$scores)
names(df_sc2) <- c("factor.1","factor.2")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
cor.plot(res_fa2, numbers = T)
Aest <- res_fa2$loadings
Dest <- diag(1 - res_fa2$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = sprintf("真の因子スコア\n相関係数 r = %.4f",
round(cor(df_true_f$factor.1, df_true_f$factor.2),5))
)
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = sprintf("推定された因子スコア (回転前)\n相関係数 r = %.4f",
round(cor(df_sc$factor.1, df_sc$factor.2),5))
)
plot(df_sc2$factor.1, df_sc2$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = sprintf("推定された因子スコア (回転後)\n相関係数 r = %.4f",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5))
)
#
# cat("推定された因子スコア (回転前) 間の相関: r = ",
#     round(cor(df_sc$factor.1, df_sc$factor.2),5), "\n")
# cat("推定された因子スコア (回転後) 間の相関: r = ",
#     round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
round(res_fa$r.scores,10)
res_fa$r.scores
knitr::opts_chunk$set(echo = TRUE, message=FALSE, warning = FALSE, cache = TRUE)
library(psych)
library(GPArotation)
library(mvtnorm)
library(tidyverse)
# 乱数のシードを設定
set.seed(1)
# サンプル数
n.sample <- 1000
p <- 10  # 項目数
# 仮想回答データを入れる変数のメモリを確保
y <- matrix(nrow = n.sample, ncol = p)
# 真の因子スコアを入れる行列のメモリを確保
tf <- matrix(0, nrow = n.sample, ncol = 2)
# 真の因子スコアの分散・共分散行列
r <- 0.6 # 因子スコア間の相関係数
Sigma <-  matrix(c(1, r, r, 1), ncol = 2)
# 因子負荷
a1 <- c(1,1,1,1,1,0,0,0,0,0)  # factor 1 項目1-5に値を持つ
a2 <- c(0,0,0,0,0,1,1,1,1,1)  # factor 2 項目6-10に値を持つ
A <- cbind(a1,a2) # 行列にまとめる
# 真の因子スコアの生成
tF <- rmvnorm(n = n.sample, mean = c(0,0), sigma = Sigma)
# 独自因子の生成
UD <- rmvnorm(n = n.sample, mean = numeric(p), sigma = diag(p) ) # 分散は1に
# 仮想回答データの生成
y <- tF %*% t(A) + UD
# 真の因子の値を入れるデータフレーム
df_true_f <- data.frame(tF)
names(df_true_f) <- c("factor.1","factor.2")
# 観測される仮想回答データをデータフレームに格納
df_data <- data.frame(y)
res_fa <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "none",    # 回転はせず，初期解を使用
fm = "ml"           # 最尤法を指定
)
# 因子スコアを推定する
# res_faでも因子スコアはres_fa$scoresとして出力されるが，
# ここはHarmanの方法を指定して改めて推定する
fsc <- factor.scores(df_data,
f = res_fa,
method = "Harman")
df_sc <- data.frame(fsc$scores)
names(df_sc) <- c("factor.1","factor.2")
round(res_fa$r.scores,5)
cor.plot(res_fa, numbers = T)
cor.plot(cor(df_data), numbers = T)
Aest <- res_fa$loadings
Dest <- diag(1 - res_fa$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
res_fa2 <- fa(r = df_data,
nfactors = 2,       # 因子数
rotate = "varimax", # 回転法はvarimaxを指定
fm = "ml"           # 最尤法を指定
)
fsc2 <- factor.scores(df_data,
f = res_fa2,
method = "Harman")
df_sc2 <- data.frame(fsc2$scores)
names(df_sc2) <- c("factor.1","factor.2")
cat("推定された因子スコア間の相関: r = ",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5), "\n")
cor.plot(res_fa2, numbers = T)
Aest <- res_fa2$loadings
Dest <- diag(1 - res_fa2$communalities)
R <- Aest %*% t(Aest) + Dest
cor.plot(R, numbers = T)
# 真の因子の象限のラベルを列に追加する
df_true_f <- df_true_f %>%
mutate(orth = sprintf("%d%d",factor.1>0, factor.2>0))
df_true_f$orth <- as.factor(df_true_f$orth)
par(pty = "s")
plot(df_true_f$factor.1, df_true_f$factor.2,
pch=".",cex = 2,col = df_true_f$orth,
main = sprintf("真の因子スコア\n相関係数 r = %.4f",
round(cor(df_true_f$factor.1, df_true_f$factor.2),5))
)
plot(df_sc$factor.1, df_sc$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = sprintf("推定された因子スコア (回転前)\n相関係数 r = %.4f",
round(cor(df_sc$factor.1, df_sc$factor.2),5))
)
plot(df_sc2$factor.1, df_sc2$factor.2, pch=".",
cex = 2,col = df_true_f$orth,
main = sprintf("推定された因子スコア (回転後)\n相関係数 r = %.4f",
round(cor(df_sc2$factor.1, df_sc2$factor.2),5))
)
unlink('fa_rotation_cache', recursive = TRUE)
unlink('fa_rotation_cache', recursive = TRUE)
unlink('fa_rotation_cache', recursive = TRUE)
